// Generated by CoffeeScript 1.10.0
(function() {
  var app, bodyParser, customerRouter, express, lookupMovie, movieRouter, postgres, rentalRouter;

  express = require('express');

  bodyParser = require('body-parser');

  app = express();

  app.use(bodyParser.json({
    type: 'application/json'
  }));

  postgres = require('./lib/postgres');

  lookupMovie = function(req, res, next) {
    var movieId, sql;
    movieId = req.params.id;
    sql = 'SELECT * FROM movie WHERE id = $1';
    return postgres.client.query(sql, [movieId], function(err, results) {
      if (err) {
        console.error(err);
        res.statusCode = 500;
        return res.json({
          errors: ['Could not retrieve movie']
        });
      }
      if (results.rows.length === 0) {
        res.statusCode = 404;
        return res.json({
          errors: ['Movie not found']
        });
      }
      req.movie = results.rows[0];
      return next();
    });
  };

  movieRouter = express.Router();

  movieRouter.get('/', function(req, res) {});

  movieRouter.post('/', function(req, res) {
    var data, sql;
    sql = 'INSERT INTO movie( title, overview,release_date, inventory) VALUES ($1,$2,$3,$4) RETURNING id';
    data = [req.body.title, req.body.overview, req.body.release_date, req.body.inventory];
    return postgres.client.query(sql, data, function(err, result) {
      var movieId;
      if (err) {
        console.error(err);
        res.statusCode = 500;
        return res.json({
          errors: ['Failed to create movie']
        });
      }
      movieId = result.rows[0].id;
      sql = 'SELECT * FROM movie WHERE id = $1';
      return postgres.client.query(sql, [movieId], function(err, result) {
        if (err) {
          console.error(err);
          res.statusCode = 500;
          return res.json({
            errors: ['Could not retrieve movie after create']
          });
        }
        res.statusCode = 201;
        return res.json(result.rows[0]);
      });
    });
  });

  movieRouter.get('/:id', lookupMovie, function(req, res) {
    return res.json(req.movie);
  });

  movieRouter.patch('/:id', lookupMovie, function(req, res) {});

  movieRouter["delete"]('/:id', lookupMovie, function(req, res) {});

  app.use('/movie', movieRouter);

  customerRouter = express.Router();

  customerRouter.get('/', function(req, res) {});

  customerRouter.post('/', function(req, res) {});

  customerRouter.get('/:id', function(req, res) {});

  customerRouter.patch('/:id', function(req, res) {});

  customerRouter["delete"]('/:id', function(req, res) {});

  app.use('/customer', customerRouter);

  rentalRouter = express.Router();

  rentalRouter.get('/', function(req, res) {});

  rentalRouter.post('/', function(req, res) {});

  rentalRouter.get('/:id', function(req, res) {});

  rentalRouter.patch('/:id', function(req, res) {});

  rentalRouter["delete"]('/:id', function(req, res) {});

  app.use('/rental', rentalRouter);

  app.get('/zomg', function(req, res) {
    return res.send('it still still works!');
  });

  module.exports = app;

}).call(this);
